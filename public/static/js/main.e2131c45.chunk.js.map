{"version":3,"sources":["components/common/logo/Logo.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Logo","id","className","Component","App","state","createMode","mode","createCode","joinCode","connectedCode","connected","infoData","textToSend","fileToSend","response","setTimeoutAlerterGlobal","isAlerterActiveGlobal","iconHash","socket","io","alerter","type","msg","icon","timer","lTimer","console","error","alerterDiv","document","getElementById","clearTimeout","innerHTML","style","display","setTimeout","preCopy","text","navigator","clipboard","writeText","toggleMode","setState","codeGenerator","result","characters","charactersLength","length","i","charAt","Math","floor","random","handleUpload","e","file","target","files","fileReader","FileReader","readAsArrayBuffer","onload","evt","arrayBuffer","name","size","data","inputUpdate","value","sender","isFile","code","emit","this","on","window","location","reload","isJoin","alert","log","onClick","map","res","index","key","href","ext","connect","placeholder","onChange","htmlFor","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e2131c45.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nexport default class Logo extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <span id=\"Logo\" className=\"font-weight-bold\">\r\n                <span className=\"text-primary\">share</span>\r\n                <span className=\"text-secondary\">drop</span>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport Logo from './components/common/logo/Logo'\n\nimport io from 'socket.io-client';\n\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    createMode: true,\n    mode: 'light',\n    createCode: '',\n    joinCode: '',\n    connectedCode: '',\n\n    connected: false,\n    infoData: {},\n    textToSend: '',\n    fileToSend: null,\n    response: []\n\n  }\n  // alerter\n  setTimeoutAlerterGlobal = null\n  isAlerterActiveGlobal = false\n  iconHash = {\n    'svg': 'fa fa-image mr-2'\n  }\n  socket = io('http://localhost:8080');\n\n\n\n  alerter = (type, msg, icon, timer) => {\n    let lTimer = 4000;\n    if (timer) {\n      lTimer = timer;\n    }\n    if (!type) {\n      throw console.error('No type in alert');\n\n    }\n    const alerterDiv = document.getElementById('alerter');\n    if (!alerterDiv) {\n      return;\n    }\n    if (!this.isAlerterActiveGlobal) {\n      alerterDiv.innerHTML = `\n                        <div class=\"alert alert-${type} animated fadeInDown squared\">\n                        <i class=\"fa ${icon} mr-2\"></i>\n                                ${msg == '' ? \"<i class='fa fa-check-circle'>  </i>\" : msg}\n                        </div>\n                        `;\n      alerterDiv.style.display = 'inline-block';\n      this.isAlerterActiveGlobal = true;\n\n      this.setTimeoutAlerterGlobal = setTimeout(() => {\n        this.isAlerterActiveGlobal = false;\n        alerterDiv.style.display = 'none';\n      }, lTimer)\n    } else {\n      this.isAlerterActiveGlobal = false;\n      clearTimeout(this.setTimeoutAlerterGlobal)\n      this.alerter(type, msg);\n\n    }\n\n\n  }\n\n\n\n\n\n  // copy to clipboard\n\n  preCopy = (text) => {\n\n    if (text) {\n\n      navigator.clipboard.writeText(text);\n\n      this.alerter('success', 'Copied  to clipboard', 'fa-check');\n      return;\n    }\n  }\n\n\n\n\n  toggleMode = () => {\n    const mode = this.state.mode === 'light' ? 'dark' : 'light'\n    this.setState({ mode })\n\n  }\n  componentDidMount() {\n    this.codeGenerator();\n\n    this.socket.on('connect', function () {\n    });\n    this.socket.on('disconnect', function () {\n      window.location.reload()\n    });\n  }\n  codeGenerator = () => {\n    const length = 5;\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n\n    this.setState({ createCode: result })\n\n  }\n  handleUpload = (e) => {\n    const file = e.target.files[0];\n    if (!file) {\n      return\n    }\n\n\n    var fileReader = new FileReader();\n\n    fileReader.readAsArrayBuffer(file);\n    fileReader.onload = (evt) => {\n      var arrayBuffer = fileReader.result;\n\n      const fileToSend = {\n        name: file.name,\n        size: file.size,\n        type: file.type,\n        data: arrayBuffer\n\n\n\n      }\n\n\n      this.setState({ fileToSend });\n\n\n    }\n\n\n\n\n\n\n  }\n  inputUpdate = (e) => {\n    this.setState({ [e.target.name]: e.target.value })\n  }\n  connect(code, isJoin) {\n\n    this.socket.emit('create', { code, isJoin })\n    this.socket.on('sync', (data) => {\n      if (data) {\n\n        const connectedCode = isJoin ? this.state.joinCode : this.state.createCode\n        this.setState({ connected: true, connectedCode });\n\n\n      }\n    })\n    this.socket.on('info', (data) => {\n      if (data) {\n\n        this.setState({ infoData: data });\n      }\n    })\n    this.socket.on('404', (data) => {\n      if (data) {\n        alert('not found')\n        this.setState({ connected: false });\n      }\n    })\n\n    this.socket.on('message', (data) => {\n      if (data) {\n\n        this.setState({ response: [...this.state.response, data] });\n        console.log(this.state.response)\n      }\n    })\n  }\n  sender = () => {\n    let isFile;\n\n    if (this.state.fileToSend) {\n      isFile = true;\n    }\n\n    const data = { file: this.state.fileToSend, text: this.state.textToSend, code: this.state.connectedCode, isFile }\n    this.socket.emit('message', data);\n\n\n    this.setState({ textToSend: '', fileToSend: null })\n  }\n  render() {\n\n\n    return (\n      <div className={this.state.mode}>\n        <div className=\"container main-body\">\n          <div id=\"alerter\" className=\"rounded\">\n\n          </div>\n          <div className=\"navbar\">\n            <h3><Logo />\n\n\n\n\n            </h3>\n            <span onClick={this.toggleMode}>\n              {this.state.connected ?\n                <span className=\"fa fa-check-circle mr-2 text-success\"></span>\n                :\n                <span className=\"fa fa-times-circle mr-2 text-danger\"></span>\n              }\n              {this.state.mode === 'light' ? <i className=\"fa fa-moon\"></i> : <i className=\"fa fa-sun text-white\"></i>}\n\n\n            </span>\n\n          </div>\n          Share files across your devices, no sign up no login. just share! Just like  AirDrop\n<br></br>\n\n          {/** sent or recieved files stays here */}\n\n\n\n\n          <br></br>\n          {/** share mode */}\n          {!this.state.connected ?\n            <div onClick={() => this.setState({ createMode: !this.state.createMode })} className=\"row\">\n              <div className=\"col-6 cursor\">\n\n                <div className={this.state.createMode ? 'bg-primary text-white rounded p-2 text-center ' : 'rounded p-2 text-center'}>\n                  <h3>Create</h3>\n\n\n                </div>\n\n              </div>\n              <div className=\"col-6 cursor\">\n\n                <div className={!this.state.createMode ? 'bg-primary text-white rounded p-2 text-center ' : 'rounded p-2 text-center'}>\n                  <h3>Join</h3>\n\n\n                </div>\n\n              </div>\n            </div>\n            :\n            <div className=\"border mb-3 p-2 border-secondary rounded\">\n\n\n              <div className=\"border rounded p-2\">\n                Connected to <code>{this.state.connectedCode}</code>\n                <br />\n                Connected devices: {this.state.infoData.length}\n                <br />\n                {this.state.infoData.length < 2 ?\n                  <small className=\"text-info\">Please connect another device, Only you is recieving these files</small>\n                  : ''\n                }\n\n              </div>\n              <br></br>\n              Files you share will appear here\n              <br></br>\n              {this.state.response.map((res, index) => {\n\n                return <div key={index} className=\"border rounded p-2 mt-3\">\n                  {\n                    !res.isFile ?\n                      <div>\n                        {res.text}\n                        <br></br>\n                        <small className=\"d-block text-muted text-right\">\n                          <i className=\"far fa-sticky-note mr-1\"></i>\n                          Note\n                        </small>\n                      </div>\n                      :\n                      <div>\n                        {res.file.name}\n                        <br></br>\n                        {res.text}\n\n                        <small className=\"d-block text-muted text-right\">\n                          <a href={\"http://localhost:8080/api/get/\" + res.file.data} target=\"_blank\">\n                            <i className=\"fa fa-cloud-download-alt mr-3\"></i>\n                          </a>\n\n\n                          <i className={this.iconHash[res.file.ext]}> </i>\n                          {res.file.ext}\n\n                        </small>\n\n                      </div>\n\n\n                  }\n\n\n                </div>\n\n              })\n\n              }\n            </div>\n          }\n\n\n          <div className=\"row \">\n            <div className=\"col-md-6\">\n              {!this.state.connected ?\n                <div>\n                  {this.state.createMode ?\n                    <div>\n                      <small className=\"text-warning\">Your create code</small>\n\n                      <h1 ><code><b>{this.state.createCode}</b></code></h1>\n\n                      <div className=\"btn-group mb-1\">\n                        <button onClick={() => this.preCopy(this.state.createCode)} className=\"btn btn-sm btn-primary\">\n                          <i className=\"fa fa-copy mr-1\"></i>\n                          Copy</button>\n                        <button className=\"btn btn-sm btn-outline-primary\">\n                          <i className=\"fa fa-share mr-1\"></i>Share</button>\n                      </div>\n                      <br></br>\n                      <br></br>\n\n                      <button onClick={() => this.connect(this.state.createCode)} className=\"btn btn-outline-primary btn-block\" type=\"button\">Create Connection</button>\n\n\n                    </div>\n                    :\n                    <div>\n                      <small className=\"text-warning\">Enter Your join code</small>\n                      <br></br>\n\n                      <input className=\"form-control\" placeholder=\"Enter your join code \" onChange={this.inputUpdate} name=\"joinCode\" value={this.state.joinCode} />\n\n                      <br></br>\n\n                      <button onClick={() => this.connect(this.state.joinCode, true)} className=\"btn btn-outline-primary btn-block\" type=\"button\">Join</button>\n\n                    </div>\n\n\n\n                  }\n                </div>\n                :\n\n                ''}\n              {/**\n              when connected\n              \n              \n              */\n                this.state.connected ?\n                  <div className=\"border rounded p-2\">\n\n\n                    Upload File\n{this.state.fileToSend ?\n                      <div>\n                        <div className=\"text-right p-2\">\n                          <i onClick={() => this.setState({ fileToSend: null })} className=\"fa cursor fa-times text-danger\"></i>\n                        </div>\n                        Name: {this.state.fileToSend.name},\n<br></br>\n                        Size: {this.state.fileToSend.size},\n</div>\n\n\n                      : ''}\n\n                    <br></br>\n                    <div className=\"text-center\">\n<br></br>\n                      <label htmlFor=\"fileinput\" className=\"cursor\"> <i className=\"fa fa-cloud-upload-alt fa-big\"></i></label>\n                      <input id=\"fileinput\" type=\"file\" onChange={this.handleUpload} className=\"form-control d-none\" />\n                    <br />\n                    <small>Files are only available on our servers for 10 Munites, after which they will be deleted</small>\n                    </div>\n                    <hr />\n\n                    Send Text\n\n                    <textarea onChange={this.inputUpdate} name=\"textToSend\" className=\"form-control \" value={this.state.textToSend}></textarea>\n                    <br />\n                    <button onClick={this.sender} className=\"btn btn-primary btn-block\">Send</button>\n\n                  </div>\n                  : ''\n              }\n\n\n            </div>\n            <div className=\"col-md-6\">\n              helpppppp\n            </div>\n          </div>\n\n\n\n        </div>\n\n\n\n\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}